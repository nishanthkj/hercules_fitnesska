"use client";

import { useEffect, useState } from "react";
import { toast } from "sonner";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";

import UsersTable from "@/components/admin/UsersTable";
import EditUserDialog from "@/components/admin/EditUserDialog";
import ItemsTable from "@/components/admin/ItemsTable";
import { EditItemDialog } from "@/components/admin/EditItemDialog";

interface User {
  id: string;
  name: string;
  email: string;
  role: "USER" | "ADMIN";
}

interface Bill {
  id: string;
  userId: string;
  invoiceNo: string;
  totalAmount: number;
  paid: boolean;
}

interface Item {
  id: string;
  name: string;
  price: number;
  stock: number;
  quantity: number;
  billId: string;
}

export default function AdminDashboard() {
  const [users, setUsers] = useState<User[]>([]);
  const [bills, setBills] = useState<Bill[]>([]);
  const [items, setItems] = useState<Item[]>([]);

  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);

  const [editItemId, setEditItemId] = useState<string | null>(null);
  const [editOpen, setEditOpen] = useState(false);

  const openEditModal = (id: string) => {
    setEditItemId(id);
    setEditOpen(true);
  };

  useEffect(() => {
    fetch("/api/admin/users")
      .then((res) => res.json())
      .then((data) => setUsers(data.users || []));

    fetch("/api/bill/list")
      .then((res) => res.json())
      .then((data) => setBills(data.bills || []));

    fetch("/api/item/list")
      .then((res) => res.json())
      .then((data) => setItems(data.items || []));
    
  }, []);

  const handleDelete = async (id: string) => {
    if (!confirm("Delete this user?")) return;

    const res = await fetch(`/api/admin/users/${id}`, {
      method: "DELETE",
    });
    const data = await res.json();

    if (data.success) {
      toast.success("User deleted");
      setUsers((prev) => prev.filter((u) => u.id !== id));
    } else {
      toast.error(data.error || "Failed to delete user");
    }
  };

  const openEdit = (user: User) => {
    setSelectedUser(user);
    setDialogOpen(true);
  };

  const updateUserInList = (updated: {
    id: string;
    name: string;
    role: string;
  }) => {
    setUsers((prev) =>
      prev.map((u) =>
        u.id === updated.id
          ? { ...u, name: updated.name, role: updated.role as "USER" | "ADMIN" }
          : u
      )
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Total Users</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{users.length}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Total Bills</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{bills.length}</p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Total Items</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-2xl font-bold">{items.length}</p>
          </CardContent>
        </Card>
      </div>

      {/* Users Table */}
      <UsersTable
        users={users}
        bills={bills}
        openEdit={openEdit}
        handleDelete={handleDelete}
      />

      {/* Items Table */}
      <ItemsTable
        items={items}
        handleDelete={handleDelete}
        openEditModal={openEditModal}
      />

      {/* Bills Table */}
      <Card>
        <CardHeader>
          <CardTitle>Bills</CardTitle>
        </CardHeader>
        <CardContent>
          <table className="w-full text-sm text-left">
            <thead>
              <tr className="border-b">
                <th className="py-2">Invoice</th>
                <th>Total</th>
                <th>Status</th>
                <th>Generated By</th>
              </tr>
            </thead>
            <tbody>
              {bills.map((bill) => {
                const user = users.find((u) => u.id === bill.userId);
                return (
                  <tr key={bill.id} className="border-b">
                    <td className="py-2">{bill.invoiceNo}</td>
                    <td>â‚¹{bill.totalAmount}</td>
                    <td>{bill.paid ? "Paid" : "Unpaid"}</td>
                    <td>{user?.name || "Unknown"}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </CardContent>
      </Card>

      {/* Edit User Dialog */}
      {selectedUser && (
        <EditUserDialog
          open={dialogOpen}
          onClose={() => setDialogOpen(false)}
          user={selectedUser}
          onUpdated={updateUserInList}
        />
      )}

      {/* Edit Item Dialog */}
      {editItemId && (
        <EditItemDialog
          open={editOpen}
          onClose={() => setEditOpen(false)}
          itemId={editItemId}
          refresh={() => {
            // Refetch updated item list
            fetch("/api/item/list")
              .then((res) => res.json())
              .then((data) => setItems(data.items || []));
          }}
        />
      )}
    </div>
  );
}
